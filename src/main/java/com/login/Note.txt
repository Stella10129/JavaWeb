***解决乱码问题***
    一、GET请求
        1.获取字符串之后使用new String(name.getBytes("iso-8859-1"),"utf-8")
        2.设置request编码格式，但是也需要更改tomcat的配置文件，在server.xml中添加useBodyEncodingForURI = true的属性
        3.直接更改server.xml，添加URIEncoding = "utf-8"的属性
    二、POST请求
       request.setCharacterEncoding = "utf-8"
    三、response响应编码
       response.setCharacterEncoding = "utf-8"


***servlet请求转发***
    ·客户端只发送一次请求
    ·URL不发生改变
    ·请求过程中只有一个request和response
    ·几个servlet共享一个request和response
    ·对客户端隐蔽，客户端不需要知道服务器端做了什么操作
    ·请求转发不能跨域访问，只能跳转当前应用中的资源
    ·请求转发可以访问WEB-INF目录下的资源
    request，path路径是相对路径（/代表web路径）
    request.getRequestDispatcher("/login.jsp").forward(request, response);


***servlet作用域***
    ·不同servlet之间怎么进行数据共享
    使用request.setAttribute(Object key, Object value)
    以及request.getAttribute(Object key)


***servlet重定向***
    ·浏览器发送两次请求
    ·URL发生变化
    ·请求过程中产生两个request和response对象
    ·两个servlet不能共享同一个request和response对象


***cookie***
    1.cookie是一种在客户端保持http状态信息的技术
    2.cookie是在浏览器访问服务器的某个资源的时候，由web服务器在响应头传送给浏览器的数据
    3.浏览器如果保存了某个cookie，那么以后每次访问服务器的时候，都会在请求头传递给服务器端
    4.一个cookie只能记录一种数据信息，而且是key-value的形式
    5.一个web站点可以给服务器端发送多个cookie，并且一个浏览器也可以存储多个站点的cookie
    ·测试过程中，可以直接在网页中查看network中的Headers中进行查看，里面有一个Cookie就是web页面存储的信息
    ·保存客户端发送不同的请求时，使用相同参数信息
    特点：cookie是保存在浏览器端的数据名称；cookie可以分为临时cookie(存储在内存中)和持久化cookie
        临时cookie：默认是存储在内存中的，所以当浏览器关闭的的时候，cookie自动失效
        持久化cookie：保存在浏览器的某一个存储目录种种，当时间过期之后才会失效
    6.一个cookie对象中只保存一个key-value键值对数据，如果想存储多个kv数据，就要创建多个cookie对象
    Cookie cookie = new Cookie("name", "abc");//创建cookie
    response.addCookie(cookie);
    //设置参数
    cookie.setMaxAge(int seconds);//设置的数字，单位为秒
    cookie.setPath(String Path);//设置的为cookie的固定路径名
    //获取cookie
    Cookie[] cookie = response.getCookies();


***Session***
    1.session表示会话，在一段时间内，用户与服务器之间的一系列的交互操作；
    2.session对象：用户发送不同的请求的时候，在服务器端保存不同的请求共享数据的存储对象；
    3.session依赖cookie技术的服务器端的数据存储技术；（有服务器创建）
    4.每个用户独立拥有一个session对象（默认存储时间是30分钟）
    创建过程：
        用户使用浏览器第一次向服务器发送请求，服务器在接受到请求后，调用对应的servlet进行处理。
        在处理过程中给用户创建一个session对象，用来存储用户请求相关的公共数据，并将这个session对象的JSESSIONID以session的形式存储在浏览器中（临时存储，浏览器关闭就失效）
        用户在发起第二次请求及后续请求时，请求信息中会附带JSESSIONID，服务器收到请求后，调用对应的servlet进行请求处理，同时根据JESSIONID返回其对应的session对象。
